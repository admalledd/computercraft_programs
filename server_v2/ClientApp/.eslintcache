[{"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/index.js":"1","/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/App.js":"2","/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/registerServiceWorker.js":"3","/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/Layout.js":"4","/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/Counter.js":"5","/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/FetchData.js":"6","/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/NavMenu.js":"7","/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/Chat.js":"8","/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/ChatWindow.js":"9","/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/ChatInput.js":"10","/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/Message.js":"11","/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/Home.tsx":"12","/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/Turtle.tsx":"13"},{"size":519,"mtime":1608950200177,"results":"14","hashOfConfig":"15"},{"size":623,"mtime":1609387624427,"results":"16","hashOfConfig":"15"},{"size":4121,"mtime":1608946561022,"results":"17","hashOfConfig":"15"},{"size":373,"mtime":1608946561034,"results":"18","hashOfConfig":"15"},{"size":744,"mtime":1608946561022,"results":"19","hashOfConfig":"15"},{"size":1525,"mtime":1608946561022,"results":"20","hashOfConfig":"15"},{"size":1607,"mtime":1608946561042,"results":"21","hashOfConfig":"15"},{"size":2187,"mtime":1609223822124,"results":"22","hashOfConfig":"15"},{"size":354,"mtime":1608950478589,"results":"23","hashOfConfig":"15"},{"size":1354,"mtime":1608950342093,"results":"24","hashOfConfig":"15"},{"size":258,"mtime":1608950367921,"results":"25","hashOfConfig":"15"},{"size":1630,"mtime":1609388366544,"results":"26","hashOfConfig":"15"},{"size":15788,"mtime":1610225188535,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"hl0r77",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"55"},"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/index.js",[],["59","60","61"],"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/App.js",[],"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/registerServiceWorker.js",[],["62","63","64"],"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/Layout.js",[],"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/Counter.js",[],"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/FetchData.js",[],"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/NavMenu.js",[],"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/Chat.js",[],"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/ChatWindow.js",[],"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/ChatInput.js",[],"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/Message.js",[],"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/Home.tsx",["65","66","67","68","69","70","71"],"import React, { Component, createContext, Dispatch, SetStateAction, useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nimport Chat from './Chat';\r\nimport TurtlePage, {Turtle} from './Turtle'\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n\troot: {\r\n\t\twidth: '100vw',\r\n\t\theight: '100vh',\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\tjustifyContent: 'center',\r\n\t\talignItems: 'center',\r\n\t},\r\n\tworld: {\r\n\t\twidth: '100%',\r\n\t\theight: 'calc(100% - 100px)'\r\n\t},\r\n}));\r\n\r\ninterface MyWindow extends Window {\r\n\texec<T>(index: number, code: string, ...args: any[]): Promise<T>;\r\n\trefreshData(): void;\r\n\tsetWorld: Function;\r\n\tsetTurtles: Function;\r\n}\r\n\r\ndeclare var window: MyWindow;\r\n\r\nexport const TurtleContext = createContext<[number, Dispatch<SetStateAction<number>>, Turtle[]]>([-1, () => { }, []] as any);\r\n\r\nexport default function Home() {\r\n  const displayName = Home.name;\r\n\r\n\r\n  const classes = useStyles();\r\n\tconst [turtles, setTurtles] = useState<Turtle[]>([]);\r\n\t//const [world, setWorld] = useState<World>({});\r\n\tconst [turtleId, setTurtleId] = useState<number>(-1);\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.setTurtles = (array: any[]) => {\r\n\t\t\tsetTurtles(array.map(turtle => new Turtle(turtle)));\r\n\t\t};\r\n\t\t//window.setWorld = setWorld;\r\n\r\n\t\t//window.refreshData();\r\n\r\n  //}, [setTurtles, setWorld]);\r\n  }, [setTurtles]);\r\n\r\n\tconst [disableEvents, setDisableEvents] = useState(false);\r\n  \r\n  return (\r\n    <>\r\n      <TurtlePage setDisableEvents={setDisableEvents} enabled={true} key={1234} turtle={new Turtle(\r\n        {inventory : []}\r\n      ) } />\r\n      <Chat />\r\n    </>\r\n  );\r\n  \r\n  \r\n  \r\n}\r\n",["72","73","74"],"/home/admalledd/dev/ComputerCraft/computercraft_programs/server_v2/ClientApp/src/components/Turtle.tsx",["75","76","77","78","79","80","81","82","83","84","85","86","87"],"\nimport React, { createContext, Dispatch, SetStateAction, useEffect, useState, useRef, useMemo } from 'react';\nimport { EventEmitter } from 'events';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup, { ButtonGroupProps } from '@material-ui/core/ButtonGroup';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport CircularProgress, { CircularProgressProps } from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { MuiThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport IconButton from '@material-ui/core/IconButton';\nimport DialogActions from '@material-ui/core/DialogActions/DialogActions';\n\nimport { DialogContentText } from '@material-ui/core';\n\n//import Inventory from './Inventory';\n//import TurtleSwitcher from './TurtleSwitcher';\n\nexport interface TurtlePageProps {\n\tturtle: Turtle;\n\tenabled: boolean;\n\tsetDisableEvents: (_: boolean) => void;\n}\n\nexport enum BlockDirection { FORWARD, UP, DOWN }\nexport enum Direction { NORTH, EAST, SOUTH, WEST }\nexport enum Side { LEFT, RIGHT }\n\ninterface Slot {\n\tcount: number;\n\tname: string;\n\tdamage: number;\n}\n\nexport class Turtle extends EventEmitter {\n\tinventory: (Slot | null)[] = [];\n\tselectedSlot: number;\n\tx: number;\n\ty: number;\n\tz: number;\n\td: Direction;\n\tlabel: string;\n\tfuel: number;\n\tmaxFuel: number;\n\tid: number;\n\tmining: boolean = false;\n\n\tconstructor(json: any) {\n\t\tsuper();\n\t\tthis.inventory = json.inventory;\n\t\tthis.selectedSlot = json.selectedSlot;\n\t\tthis.x = json.x;\n\t\tthis.y = json.y;\n\t\tthis.z = json.z;\n\t\tthis.d = json.d;\n\t\tthis.fuel = json.fuel;\n\t\tthis.maxFuel = json.maxFuel;\n\t\tthis.label = json.label;\n\t\tthis.id = json.id;\n\t}\n\t\n\ttoJSON(): object {\n\t\treturn {\n\t\t\tlabel: this.label,\n\t\t\tinventory: this.inventory,\n\t\t\tselectedSlot: this.selectedSlot,\n\t\t\tx: this.x,\n\t\t\ty: this.y,\n\t\t\tz: this.z,\n\t\t\td: this.d,\n\t\t\tfuel: this.fuel,\n\t\t\tmaxFuel: this.maxFuel,\n\t\t\tid: this.id,\n\t\t\tmining: this.mining\n\t\t};\n\t}\n\n\texec<T>(command: string): Promise<T> {\n\t\t//TODO: SignalR Hub-ize\n\t\treturn new Promise(r => {\n\t\t\tconsole.log(\"exec:\"+command);\n\t\t\t// const nonce = getNonce();\n\t\t\t// this.ws.send(JSON.stringify({\n\t\t\t// \ttype: 'eval',\n\t\t\t// \tfunction: `return ${command}`,\n\t\t\t// \tnonce\n\t\t\t// }));\n\n\t\t\t// const listener = (resp: string) => {\n\t\t\t// \ttry {\n\t\t\t// \t\tlet res = JSON.parse(resp);\n\t\t\t// \t\tif (res?.nonce === nonce) {\n\t\t\t// \t\t\tr(res.data);\n\t\t\t// \t\t\tthis.ws.off('message', listener);\n\t\t\t// \t\t}\n\t\t\t// \t} catch (e) { }\n\t\t\t// };\n\n\t\t\t// this.ws.on('message', listener);\n\t\t});\n\t}\n\n\n\tasync forward(): Promise<boolean> {\n\t\tlet r = await this.exec<boolean>('turtle.forward()');\n\t\tif (r) {\n\t\t\tthis.fuel--;\n\t\t\tawait this.updatePosition('forward');\n\t\t}\n\t\treturn r;\n\t}\n\tasync back(): Promise<boolean> {\n\t\tlet r = await this.exec<boolean>('turtle.back()');\n\t\tif (r) {\n\t\t\tthis.fuel--;\n\t\t\tawait this.updatePosition('back');\n\t\t}\n\t\treturn r;\n\t}\n\tasync up(): Promise<boolean> {\n\t\tlet r = await this.exec<boolean>('turtle.up()');\n\t\tif (r) {\n\t\t\tthis.fuel--;\n\t\t\tawait this.updatePosition('up');\n\t\t}\n\t\treturn r;\n\t}\n\tasync down(): Promise<boolean> {\n\t\tlet r = await this.exec<boolean>('turtle.down()');\n\t\tif (r) {\n\t\t\tthis.fuel--;\n\t\t\tawait this.updatePosition('down');\n\t\t}\n\t\treturn r;\n\t}\n\tasync turnLeft(): Promise<boolean> {\n\t\tlet r = await this.exec<boolean>('turtle.turnLeft()');\n\t\tif (r) {\n\t\t\tawait this.updatePosition('left');\n\t\t}\n\t\treturn r;\n\t}\n\tasync turnRight(): Promise<boolean> {\n\t\tlet r = await this.exec<boolean>('turtle.turnRight()');\n\t\tif (r) {\n\t\t\tawait this.updatePosition('right');\n\t\t}\n\t\treturn r;\n\t}\n\n\tprivate parseDirection(prefix: string, direction: BlockDirection): string {\n\t\tswitch (direction) {\n\t\t\tcase BlockDirection.FORWARD:\n\t\t\t\treturn prefix;\n\t\t\tcase BlockDirection.UP:\n\t\t\t\treturn prefix + 'Up';\n\t\t\tcase BlockDirection.DOWN:\n\t\t\t\treturn prefix + 'Down';\n\t\t}\n\t}\n\n\tprivate async updateInventory() {\n\t\tthis.inventory = await this.exec<Slot[]>('{' + new Array(16).fill(0).map((_, i) => `turtle.getItemDetail(${i + 1})`).join(', ') + '}');\n\t\twhile (this.inventory.length < 16) {\n\t\t\tthis.inventory.push(null);\n\t\t}\n\t\tthis.emit('update');\n\t}\n\n\tprivate async updateFuel() {\n\t\tthis.emit('update');\n\t}\n\n\tprivate getDirectionDelta(dir: Direction): [number, number] {\n\t\tif (dir === Direction.NORTH) return [0, -1];\n\t\telse if (dir === Direction.EAST) return [1, 0];\n\t\telse if (dir === Direction.SOUTH) return [0, 1];\n\t\telse if (dir === Direction.WEST) return [-1, 0];\n\t\treturn [0, 0];\n\t}\n\n\tprivate async updatePosition(move: string) {\n\t\t//TODO: signalR-ize\n\t\treturn;\n\t\t/*\n\t\tlet deltas = this.getDirectionDelta(this.d);\n\t\tswitch (move) {\n\t\t\tcase 'up':\n\t\t\t\tthis.y++;\n\t\t\t\tbreak;\n\t\t\tcase 'down':\n\t\t\t\tthis.y--;\n\t\t\t\tbreak;\n\t\t\tcase 'forward':\n\t\t\t\tthis.x += deltas[0];\n\t\t\t\tthis.z += deltas[1];\n\t\t\t\tbreak;\n\t\t\tcase 'back':\n\t\t\t\tthis.x -= deltas[0];\n\t\t\t\tthis.z -= deltas[1];\n\t\t\t\tbreak;\n\t\t\tcase 'left':\n\t\t\t\tthis.d += 3;\n\t\t\t\tthis.d %= 4;\n\t\t\t\tbreak;\n\t\t\tcase 'right':\n\t\t\t\tthis.d++;\n\t\t\t\tthis.d %= 4;\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.world.updateTurtle(this, this.x, this.y, this.z, this.d);\n\t\tawait this.updateBlock();\n\t\tthis.emit('update');*/\n\t}\n\n\tprivate async updateBlock() {\n\t\tlet deltas = this.getDirectionDelta(this.d);\n\t\tlet { forward, up, down } = await this.exec<{ forward: any, up: any, down: any }>('{down=select(2,turtle.inspectDown()), up=select(2,turtle.inspectUp()), forward=select(2,turtle.inspect())}');\n\t\t//this.world.updateBlock(this.x, this.y - 1, this.z, down);\n\t\t//this.world.updateBlock(this.x, this.y + 1, this.z, up);\n\t\t//this.world.updateBlock(this.x + deltas[0], this.y, this.z + deltas[1], forward);\n\t}\n\n\tasync dig(direction: BlockDirection) {\n\t\tlet r = await this.exec<boolean>(`turtle.${this.parseDirection('dig', direction)}()`);\n\t\tawait this.updateInventory();\n\t\tawait this.updateBlock();\n\t\treturn r;\n\t}\n\tasync place(direction: BlockDirection, signText?: string) {\n\t\tlet r = await this.exec<boolean>(`turtle.${this.parseDirection('place', direction)}(${signText ? ('\"' + signText + '\"') : ''})`);\n\t\tawait this.updateInventory();\n\t\tawait this.updateBlock();\n\t\treturn r;\n\t}\n\tasync drop(direction: BlockDirection, count?: number) {\n\t\tlet r = await this.exec<boolean>(`turtle.${this.parseDirection('drop', direction)}(${(typeof count === 'number') ? count.toString() : ''})`);\n\t\tawait this.updateInventory();\n\t\treturn r;\n\t}\n\tasync suck(direction: BlockDirection, count?: number) {\n\t\tlet r = await this.exec<boolean>(`turtle.${this.parseDirection('suck', direction)}(${(typeof count === 'number') ? count.toString() : ''})`);\n\t\tawait this.updateInventory();\n\t\treturn r;\n\t}\n\tasync refuel(count?: number) {\n\t\tlet r = await this.exec<boolean>(`turtle.refuel(${(typeof count === 'number') ? count.toString() : ''})`);\n\t\tthis.fuel = await this.exec<number>('turtle.getFuelLevel()');\n\t\tawait this.updateInventory();\n\t\treturn r;\n\t}\n\tasync equip(side: 'left' | 'right') {\n\t\tlet r;\n\t\tif (side === 'left')\n\t\t\tr = await this.exec<boolean>('turtle.equipLeft()');\n\t\telse\n\t\t\tr = await this.exec<boolean>('turtle.equipRight()');\n\t\tawait this.updateInventory();\n\t\treturn r;\n\t}\n\tasync selectSlot(slot: number) {\n\t\tif (slot > 0 && slot < 17) {\n\t\t\tthis.selectedSlot = slot;\n\t\t\tlet r = await this.exec<boolean>(`turtle.select(${slot})`);\n\t\t\tthis.emit('update');\n\t\t\treturn r;\n\t\t}\n\t\treturn false;\n\t}\n\tasync refresh() {\n\t\tawait this.updateInventory();\n\t\tawait this.updateBlock();\n\t\tthis.selectedSlot = await this.exec<number>('turtle.getSelectedSlot()');\n\t\tthis.maxFuel = await this.exec<number>('turtle.getFuelLimit()');\n\t\tthis.fuel = await this.exec<number>('turtle.getFuelLevel()');\n\t}\n\tasync moveItems(slot: number, amount: 'all' | 'half' | 'one') {\n\t\tlet max = this.inventory[this.selectedSlot - 1]?.count;\n\t\tif (max) {\n\t\t\tlet count = 1;\n\t\t\tif (amount === 'all') count = max;\n\t\t\telse if (amount === 'half') count = Math.floor(max / 2);\n\t\t\tlet r = await this.exec<boolean>(`turtle.transferTo(${slot}, ${count})`);\n\t\t\tawait this.updateInventory();\n\t\t\treturn r;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync craft(amount: 'all' | 'one') {\n\t\tlet r = await this.exec<boolean>(`turtle.craft(${amount === 'one' ? '1' : ''})`);\n\t\tawait this.updateInventory();\n\t\treturn r;\n\t}\n}\n\n\nconst useStyles = makeStyles(theme => ({\n\ttoolbar: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'start',\n\t\talignItems: 'center',\n\t\tbackground: '#252525',\n\t\theight: 100,\n\t\twidth: '100%',\n\t},\n\tgroups: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'start',\n\t\t'&>*': {\n\t\t\tmarginLeft: theme.spacing(1),\n\t\t\tmarginRight: theme.spacing(1),\n\t\t}\n\t}\n}));\n\n\nfunction CircularProgressWithLabel(props: CircularProgressProps & { label: any }) {\n\treturn (\n\t\t<Box style={{ position: 'relative', display: 'inline-flex' }}>\n\t\t\t<CircularProgress variant=\"static\" {...props} />\n\t\t\t<Box style={{ top: 0, left: 0, bottom: 0, right: 0, position: 'absolute', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\t\t\t>\n\t\t\t\t<Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{props.label}</Typography>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n}\n\n\nexport default function TurtlePage({ turtle, enabled, setDisableEvents }: TurtlePageProps) {\n\tconst [signText, setSignText] = useState<string | null>(null);\n\tconst [commandText, setCommandText] = useState<string | null>(null);\n\tconst [commandResult, setCommandResult] = useState<string | null>(null);\n\tconst [mineLength, setMineLength] = useState<string>('');\n\tconst currentSignDirection = useRef<BlockDirection>(BlockDirection.FORWARD);\n\tconst classes = useStyles({ enabled });\n\n\tconst placeBlock = (dir: BlockDirection) => {\n\t\tif (turtle.inventory[turtle.selectedSlot - 1]?.name === 'minecraft:sign') {\n\t\t\tcurrentSignDirection.current = dir;\n\t\t\tsetSignText('');\n\t\t} else {\n\t\t\tturtle.place(dir);\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tsetDisableEvents(signText !== null || commandText !== null || commandResult !== null);\n\t}, [signText, commandText]);\n\n\treturn (\n\t\t<>\n\t\t\t<Dialog disableBackdropClick open={signText !== null} onClose={() => setSignText(null)}>\n\t\t\t\t<DialogTitle>Sign Text</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<TextField value={signText || ''} onChange={(ev) => setSignText(ev.target.value)} variant=\"outlined\" />\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={() => setSignText(null)}>Cancel</Button>\n\t\t\t\t\t<Button onClick={() => {\n\t\t\t\t\t\tsetSignText(null);\n\t\t\t\t\t\tturtle.place(currentSignDirection.current, signText!);\n\t\t\t\t\t}}>Place</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t\t<Dialog disableBackdropClick open={commandText !== null} onClose={() => setCommandText(null)}>\n\t\t\t\t<DialogTitle>Command</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<TextField value={commandText || ''} onChange={(ev) => setCommandText(ev.target.value)} variant=\"outlined\" />\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={() => setCommandText(null)}>Cancel</Button>\n\t\t\t\t\t<Button onClick={() => {\n\t\t\t\t\t\tsetCommandText(null);\n\t\t\t\t\t\tturtle.exec<string>(commandText!).then((res) => setCommandResult(res));\n\t\t\t\t\t}}>Run</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t\t<Dialog disableBackdropClick open={commandResult !== null} onClose={() => setCommandResult(null)}>\n\t\t\t\t<DialogTitle>Command Result</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<DialogContentText>{commandResult}</DialogContentText>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={() => setCommandResult(null)}>Ok</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t\t<div className={classes.toolbar} style={{ display: enabled ? undefined : \"none\" }}>\n\t\t\t\t{/* <Inventory turtle={turtle} /> */}\n\t\t\t\t<div className={classes.groups}>\n\t\t\t\t\t<TurtleButtonGroup turtle={turtle} func=\"dig\" color='#e74c3c' />\n\t\t\t\t\t<ColoredButtonGroup groupColor='#e67e22' size=\"small\" orientation=\"vertical\">\n\t\t\t\t\t\t<Button tabIndex=\"-1\" variant=\"outlined\" color=\"primary\" onClick={() => placeBlock(BlockDirection.UP)}><ArrowUpward /></Button>\n\t\t\t\t\t\t<Button tabIndex=\"-1\" variant=\"outlined\" color=\"primary\" onClick={() => placeBlock(BlockDirection.FORWARD)}>\n\t\t\t\t\t\t\tplace\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button tabIndex=\"-1\" variant=\"outlined\" color=\"primary\" onClick={() => placeBlock(BlockDirection.DOWN)}><ArrowDownward /></Button>\n\t\t\t\t\t</ColoredButtonGroup>\n\t\t\t\t\t<TurtleButtonGroup turtle={turtle} func=\"suck\" color='#f1c40f' />\n\t\t\t\t\t<TurtleButtonGroup turtle={turtle} func=\"drop\" color='#2ecc71' />\n\t\t\t\t\t<ColoredButtonGroup size=\"small\" orientation=\"vertical\" groupColor='#3498db'>\n\t\t\t\t\t\t<Button tabIndex=\"-1\" variant=\"outlined\" color=\"primary\" onClick={() => turtle.craft('all')}>Craft All</Button>\n\t\t\t\t\t\t<Button tabIndex=\"-1\" variant=\"outlined\" color=\"primary\" onClick={() => turtle.craft('one')}>Craft One</Button>\n\t\t\t\t\t\t<Button tabIndex=\"-1\" variant=\"outlined\" color=\"primary\" onClick={() => turtle.refuel()}>Refuel</Button>\n\t\t\t\t\t</ColoredButtonGroup>\n\t\t\t\t\t<ColoredButtonGroup size=\"small\" orientation=\"vertical\" groupColor='#9b59b6'>\n\t\t\t\t\t\t<Button tabIndex=\"-1\" variant=\"outlined\" color=\"primary\" onClick={() => turtle.refresh()}>Refresh Info</Button>\n\t\t\t\t\t\t{/* <Button tabIndex=\"-1\" variant=\"outlined\" color=\"primary\" onClick={() => turtle.undergoMitosis()}>Undergo Mitosis</Button> */}\n\t\t\t\t\t\t<Button tabIndex=\"-1\" variant=\"outlined\" color=\"primary\" onClick={() => setCommandText('')}>Run Command</Button>\n\t\t\t\t\t</ColoredButtonGroup>\n\t\t\t\t\t{/* <TextField\n\t\t\t\t\t\tlabel=\"Mine Tunnel\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={mineLength}\n\t\t\t\t\t\tonChange={(ev) => setMineLength(ev.target.value)}\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tendAdornment: <InputAdornment position=\"end\">\n\t\t\t\t\t\t\t\t<IconButton onClick={() => turtle.mineTunnel('down', parseInt(mineLength))}>\n\t\t\t\t\t\t\t\t\t<ArrowDownward />\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t<IconButton onClick={() => turtle.mineTunnel('forward', parseInt(mineLength))}>\n\t\t\t\t\t\t\t\t\t<SvgIcon>\n\t\t\t\t\t\t\t\t\t\t<path d=\"M14.79,10.62L3.5,21.9L2.1,20.5L13.38,9.21L14.79,10.62M19.27,7.73L19.86,7.14L19.07,6.35L19.71,5.71L18.29,4.29L17.65,4.93L16.86,4.14L16.27,4.73C14.53,3.31 12.57,2.17 10.47,1.37L9.64,3.16C11.39,4.08 13,5.19 14.5,6.5L14,7L17,10L17.5,9.5C18.81,11 19.92,12.61 20.84,14.36L22.63,13.53C21.83,11.43 20.69,9.47 19.27,7.73Z\" />\n\t\t\t\t\t\t\t\t\t</SvgIcon>\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t<IconButton onClick={() => turtle.mineTunnel('up', parseInt(mineLength))}>\n\t\t\t\t\t\t\t\t\t<ArrowUpward />\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t</InputAdornment>\n\t\t\t\t\t\t}}\n\t\t\t\t\t/> */}\n\t\t\t\t</div>\n\t\t\t\t{/* <TurtleSwitcher /> */}\n\t\t\t\t<CircularProgressWithLabel variant=\"determinate\" value={turtle.fuel / turtle.maxFuel * 100} label={turtle.fuel} />\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\ninterface TurtleButtonGroupProps {\n\tturtle: Turtle;\n\tfunc: 'place' | 'dig' | 'drop' | 'suck';\n\tcolor: string;\n}\n\nfunction ColoredButtonGroup({ groupColor, ...props }: { groupColor: string } & ButtonGroupProps) {\n\tconst theme = useMemo(() => createMuiTheme({\n\t\tpalette: {\n\t\t\tprimary: {\n\t\t\t\tmain: groupColor\n\t\t\t}\n\t\t},\n\t}), [groupColor]);\n\treturn (\n\t\t<MuiThemeProvider theme={theme}>\n\t\t\t<ButtonGroup {...props} />\n\t\t</MuiThemeProvider >\n\t);\n\n}\n\nfunction TurtleButtonGroup({ turtle, func, color }: TurtleButtonGroupProps) {\n\treturn (\n\t\t<ColoredButtonGroup groupColor={color} size=\"small\" orientation=\"vertical\">\n\t\t\t<Button tabIndex=\"-1\" variant=\"outlined\" color=\"primary\" onClick={() => turtle[func](BlockDirection.UP)}><ArrowUpward /></Button>\n\t\t\t<Button tabIndex=\"-1\" variant=\"outlined\" color=\"primary\" onClick={() => turtle[func](BlockDirection.FORWARD)}>\n\t\t\t\t{func}\n\t\t\t</Button>\n\t\t\t<Button tabIndex=\"-1\" variant=\"outlined\" color=\"primary\" onClick={() => turtle[func](BlockDirection.DOWN)}><ArrowDownward /></Button>\n\t\t</ColoredButtonGroup>\n\t);\n}\n",{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"88","replacedBy":"94"},{"ruleId":"90","replacedBy":"95"},{"ruleId":"92","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":26},{"ruleId":"97","severity":1,"message":"101","line":35,"column":9,"nodeType":"99","messageId":"100","endLine":35,"endColumn":20},{"ruleId":"97","severity":1,"message":"102","line":38,"column":9,"nodeType":"99","messageId":"100","endLine":38,"endColumn":16},{"ruleId":"97","severity":1,"message":"103","line":39,"column":9,"nodeType":"99","messageId":"100","endLine":39,"endColumn":16},{"ruleId":"97","severity":1,"message":"104","line":41,"column":9,"nodeType":"99","messageId":"100","endLine":41,"endColumn":17},{"ruleId":"97","severity":1,"message":"105","line":41,"column":19,"nodeType":"99","messageId":"100","endLine":41,"endColumn":30},{"ruleId":"97","severity":1,"message":"106","line":54,"column":9,"nodeType":"99","messageId":"100","endLine":54,"endColumn":22},{"ruleId":"88","replacedBy":"94"},{"ruleId":"90","replacedBy":"95"},{"ruleId":"92","replacedBy":"107"},{"ruleId":"97","severity":1,"message":"108","line":2,"column":17,"nodeType":"99","messageId":"100","endLine":2,"endColumn":30},{"ruleId":"97","severity":1,"message":"109","line":2,"column":32,"nodeType":"99","messageId":"100","endLine":2,"endColumn":40},{"ruleId":"97","severity":1,"message":"110","line":2,"column":42,"nodeType":"99","messageId":"100","endLine":2,"endColumn":56},{"ruleId":"97","severity":1,"message":"111","line":16,"column":8,"nodeType":"99","messageId":"100","endLine":16,"endColumn":22},{"ruleId":"97","severity":1,"message":"112","line":17,"column":8,"nodeType":"99","messageId":"100","endLine":17,"endColumn":15},{"ruleId":"97","severity":1,"message":"113","line":18,"column":8,"nodeType":"99","messageId":"100","endLine":18,"endColumn":18},{"ruleId":"97","severity":1,"message":"114","line":224,"column":7,"nodeType":"99","messageId":"100","endLine":224,"endColumn":13},{"ruleId":"97","severity":1,"message":"115","line":225,"column":9,"nodeType":"99","messageId":"100","endLine":225,"endColumn":16},{"ruleId":"97","severity":1,"message":"116","line":225,"column":18,"nodeType":"99","messageId":"100","endLine":225,"endColumn":20},{"ruleId":"97","severity":1,"message":"117","line":225,"column":22,"nodeType":"99","messageId":"100","endLine":225,"endColumn":26},{"ruleId":"97","severity":1,"message":"118","line":342,"column":9,"nodeType":"99","messageId":"100","endLine":342,"endColumn":19},{"ruleId":"97","severity":1,"message":"119","line":342,"column":21,"nodeType":"99","messageId":"100","endLine":342,"endColumn":34},{"ruleId":"120","severity":1,"message":"121","line":357,"column":5,"nodeType":"122","endLine":357,"endColumn":28,"suggestions":"123"},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"jsx-a11y/accessible-emoji",[],["124"],["125"],[],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'displayName' is assigned a value but never used.","'classes' is assigned a value but never used.","'turtles' is assigned a value but never used.","'turtleId' is assigned a value but never used.","'setTurtleId' is assigned a value but never used.","'disableEvents' is assigned a value but never used.",[],"'createContext' is defined but never used.","'Dispatch' is defined but never used.","'SetStateAction' is defined but never used.","'InputAdornment' is defined but never used.","'SvgIcon' is defined but never used.","'IconButton' is defined but never used.","'deltas' is assigned a value but never used.","'forward' is assigned a value but never used.","'up' is assigned a value but never used.","'down' is assigned a value but never used.","'mineLength' is assigned a value but never used.","'setMineLength' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'commandResult' and 'setDisableEvents'. Either include them or remove the dependency array. If 'setDisableEvents' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["126"],"no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},"Update the dependencies array to be: [signText, commandText, setDisableEvents, commandResult]",{"range":"129","text":"130"},[10176,10199],"[signText, commandText, setDisableEvents, commandResult]"]